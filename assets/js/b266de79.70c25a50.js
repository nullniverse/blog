"use strict";(self.webpackChunknullniverseblog=self.webpackChunknullniverseblog||[]).push([[518],{4369:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"netwitness-parser-101","metadata":{"permalink":"/netwitness-parser-101","source":"@site/blog/2024-08-03-netwitness-integrations-101/index.mdx","title":"Netwitness Integrations 101","description":"Collection of tips on how to create NetWitness integrations, mainly using 3rd-party APIs not currently (at the time of publishing, circa 2022) supported by the official release.","date":"2024-08-03T00:00:00.000Z","tags":[{"inline":true,"label":"blogging","permalink":"/tags/blogging"},{"inline":true,"label":"tool","permalink":"/tags/tool"}],"readingTime":32.82,"hasTruncateMarker":true,"authors":[{"name":"Nullniverse","title":"Vassal @ \u7279\u8d38 Cyber","url":"https://github.com/nullniverse","imageURL":"https://github.com/nullniverse.png","key":"nullniverse","page":null}],"frontMatter":{"slug":"netwitness-parser-101","title":"Netwitness Integrations 101","authors":["nullniverse"],"tags":["blogging","tool"]},"unlisted":false,"nextItem":{"title":"Pod Recurrent Restarts via Cronjobs","permalink":"/pod-recurrent-restarts"}},"content":"_Collection of tips on how to create NetWitness integrations, mainly using 3rd-party APIs not currently (at the time of publishing, circa 2022) supported by the official release._\\n\\n {/* truncate */}\\n\\n---\\n![Netwitness logo](./netwitness-logo-555x100-1.png)\\n\\n## Introduction\\n\\nThis post compiles knowledge from the old times, when Netwitness still dominating the SIEM/Threat Intel arena and flowrished prior to the massive cloud-scale era. \\n\\nI did some work on the platform and I liked the architectural choices and its operations. I did some customizations as needed, and also built some integrations, mainly parsing for unsupported appliances from diverse vendors.\\n\\nHere I try my best to distill this information I\'ve found useful and important at that time. Chances are nothing of it still works as-is, so do your due dilligence if you are touching the platform.\\n\\n## Log Integration in RSA NetWitness\\n\\nSometimes, log integrations is a pain in the arse. Sometimes, you need to use any silvertape to glue the missing pieces together during your analysis due to the lack of a built-in native interface in the platform for easily integration.\\n\\nThe non-existent example of a simple REST plugin to pull data from APIs across different vendors if they are not readly [supported](https://community.netwitness.com/t5/netwitness-platform-integrations/tkb-p/netwitness-integrations) baffles the mind of the unsuspecting.\\n\\nThis guide is intendend not only to provide some already integrations previously made by me, but to **guide** you in the path of log parser construction, by point out the fastest routes possible to get it done in a timely manner - because sometimes **Netwitness Community** is a very deep jungle with resources scattered here and there.\\n\\n### How to Log Collect in NW\\n\\nNetwitness provides [distinct](https://community.netwitness.com/t5/netwitness-platform-online/log-collection-configuration/ta-p/669330) ways of log collection that could be leveraged depending on your type of implementation.\\n\\nAs of version 11.5 and later, the allowed collection protocols still in use, are:\\n\\n - Check Point (OPSEC LEA)\\n - File\\n - Netflow\\n - ODBC\\n - Plugins (AWS Cloudtrail & Azure)\\n - SDEE\\n - SNMP Trap\\n - Syslog\\n - VMWare\\n - Windows\\n - Logstash\\n - Windows Legacy\\n\\nIn many cases, your log source is sending to you using a combination of Syslog and [CEF definitions](https://www.crowdstrike.com/cybersecurity-101/observability/log-file-formats/#CEF) [e.g.](https://kc.mcafee.com/resources/sites/MCAFEE/content/live/CORP_KNOWLEDGEBASE/78000/KB78712/en_US/CEF_White_Paper_20100722.pdf), from which RSA NW has standard native support - unless your vendor don\'t deviates from standardized CEF notation.\\n\\nEven if that is true, you would end up needing a combination of Syslog and a custom way to parse your results received from Syslog, that arrives in a format not already supported or for which NW does not have any [Live](https://live.netwitness.rsa.com/registration/index.html) support. In such cases, the way to solve this headache is to make use of tools available by RSA itself. They are composed of the [Log Parser Tool](https://community.netwitness.com//t5/netwitness-platform-online/rsa-netwitness-log-parser-tool-v1-1-release-notes/ta-p/567402) and in the versions 11.5 and later, [JSON Mappings](https://community.netwitness.com/t5/netwitness-platform-online/json-mappings/ta-p/669375), thich allow the parse of JSON messages arriving in the platform using a friendly UI.\\n\\nIn the following lines you\'ll know how to handle a custom implementation through the use of APIs provided by many vendors.\\n\\n---\\n\\n## Creating custom log collection and parsing\\n\\nYour work may involve integration of some network devices, firewalls and security SaaS tools.\\n\\nI chose Python3 for quick deployment and easy maintenance. Python practitioners will find the code a little \\"disgraceful\\" but the aim is to avoid friction among team members whose experience with Python is little or nonexistent.\\n\\nThis type of integration is very simple:\\n\\n1. Develop your API integration using any type of programming language of your choice.\\n\\n2. Generate a log file, where each line represents an event collected via the API, and save the file in the path below, using [Custom FileSpec](https://www.youtube.com/watch?v=xK6XjzaWvX0) : `/var/netwitness/logcollector/upload/<source_name>`\\n\\n3. Once events are being received in the platform, proceed to generate the parser file.\\n\\n4. After the parser is generated, extracted and [installed](https://community.netwitness.com/t5/netwitness-community-blog/leveraging-rsa-live-to-deploy-custom-parsers-in-large/ba-p/519773), [adjust and add](https://community.netwitness.com/t5/netwitness-knowledge-base/how-to-add-custom-meta-keys-in-rsa-netwitness-platform/ta-p/677308) custom meta keys as needed either by using [this tool](https://github.com/nullniverse/netwitness-integrations/blob/main/etc/netwitness/ng/envision/etc/table-map-custom.xml) for discovery, or these [steps](https://community.netwitness.com/t5/netwitness-knowledge-base/how-to-add-custom-meta-keys-in-rsa-netwitness-platform/ta-p/677308).\\n\\n        a. Parsers can be restarted without reinitializing the entire application, see [here](https://community.netwitness.com/t5/netwitness-knowledge-base/how-to-reload-parsers-on-a-decoder-or-log-decoder-via-the-rsa/ta-p/676949/redirect_from_archived_page/true) for details.\\n\\n        b. After adjusting your index-concentrator-custom.xml and table-map-custom.xml a restart is needed in each service.\\n\\nThat\'s it. I\'ve tried to be as brief as possible. You can find a lot of resources below in the [refs](/netwitness-parser-101#references). In the next topic I\'ll provide examples of parsers I\'ve already made, feel free to use it as you want, hope it guides you in your parser journey. Peace be upon the traveler!\\n\\n## Example Parsers\\n\\n### Tenable.io\\n\\n<details>\\n  <summary>Example parser for Container Security using Python and a credential for authentication with the API.</summary>\\n\\n```json title=\\"/opt/parsers/tenableio/creds/access_creds.json\\"\\n{\\"access\\":\\"access-key here\\",\\"secret\\":\\"secret-key here\\"}\\n```\\n\\n\\n```python title=\\"/opt/parsers/tenableio/container-security.py\\"\\nimport pprint, json, datetime, time, os.path\\nfrom multiprocessing.context import assert_spawning\\nfrom tenable.io import TenableIO\\n\\n# JSON PrettyPrinter Identation properties\\npp = pprint.PrettyPrinter(indent=4)\\n\\n# Credentials load and definition\\n\\nwith open(\\"/opt/parsers/tenableio/creds/access_creds.json\\", \\"r\\") as read_file:\\n    data_json = json.load(read_file)\\naccess_key = data_json[\\"access\\"]\\nsecret_key = data_json[\\"secret\\"]\\n\\ntio = TenableIO(access_key, secret_key)\\n\\n# Path to send logs to\\npath_dir = \\"/var/netwitness/logcollector/upload/tenableio/tenableio/\\"\\nfilepath = os.path.join(path_dir, \\"container-security.log\\")\\n\\n# |-------------------------------------|\\n# |------------- Tenable.IO ------------|\\n# |------ Container Security Logs ------|\\n# |-------------------------------------|\\n\\n# Check for problems\\ndef has_problems(x, y):\\n    if x > 0 or y > 0:\\n      return  1\\n    else:\\n      return 0\\n\\n# Main function\\ndef doit():\\n\\n    # Define `Now`\\n    now_time = datetime.datetime.now().replace(microsecond=0).isoformat()\\n\\n    # Grab current image lists\\n    images_list = tio.cs.images.list(return_json=True)\\n\\n    # Create \\"events\\" array of events\\n    events = []\\n\\n    # If there are any images, proceed to next step...\\n    if len(images_list[\\"items\\"]) > 0:\\n        \\n        for item in images_list[\\"items\\"]:\\n        \\n            # Print all images found - for Fast Debug only [Turn ON/OFF]\\n            #\\n            # print(\\"repo: \\" +  item[\\"repo_name\\"] + \\"name: \\" + item[\\"name\\"] + \\" tag: \\" + item[\\"tag\\"] +  \\" number_of_malware: \\" + str(item.number_of_malware) + \\" number_of_vulns: \\" + str(item.number_of_vulns))\\n\\n\\n            # Check to see if any malware or vulnerabilities were found during the scan, if so, keep going...\\n            eval_problems = has_problems(item.number_of_malware, item.number_of_vulns)\\n            if eval_problems == 1:\\n\\n                # Predefine keys to use in \\"Reports\\" and \\"Image Details\\"\\n                image_keys = {\\"repo_name\\": \\"\\", \\"name\\": \\"\\", \\"tag\\": \\"\\"}\\n\\n                image_keys[\\"repo_name\\"] = item[\\"repo_name\\"]\\n                image_keys[\\"name\\"] = item[\\"name\\"]\\n                image_keys[\\"tag\\"] = item[\\"tag\\"]\\n\\n\\n                # Get image details\\n\\n                details = tio.cs.images.details(image_keys[\\"repo_name\\"], image_keys[\\"name\\"], image_keys[\\"tag\\"])\\n\\n                # Image details information grab\\n                digest = details[\\"digest\\"]\\n                last_scanned = details[\\"last_scanned\\"]\\n                uploaded_at = details[\\"uploaded_at\\"]\\n                risk_score = details.risk_score\\n                status =  details[\\"status\\"]\\n                num_vulns = details.number_of_vulns\\n                num_malware = details.number_of_malware\\n                \\n                \\n                # Generate reports for the images that contains vulns or malwares\\n                reports = tio.cs.reports.report(image_keys[\\"repo_name\\"], image_keys[\\"name\\"], image_keys[\\"tag\\"])\\n\\n                # Define events counter and erase counter from previous \\"item\\"\\n                count_probs = 0\\n\\n                # Clear previous message\\n                message = \\"\\"\\n\\n                for report in reports[\\"findings\\"]:\\n                    \\n                    count_probs += 1\\n                    \\n                    # Define log fields\\n\\n                    access_complexity = report[\\"nvd_finding\\"][\\"access_complexity\\"]\\n                    access_vector = report[\\"nvd_finding\\"][\\"access_vector\\"]\\n                    auth = report[\\"nvd_finding\\"][\\"auth\\"]\\n                    availability_impact = report[\\"nvd_finding\\"][\\"availability_impact\\"]\\n                    cfd_impact = report[\\"nvd_finding\\"][\\"confidentiality_impact\\"]\\n                    cve = report[\\"nvd_finding\\"][\\"cve\\"]\\n                    cvss_score = report[\\"nvd_finding\\"][\\"cvss_score\\"]\\n                    cvss_vector = report[\\"nvd_finding\\"][\\"cvss_vector\\"]\\n                    integrity_impact = report[\\"nvd_finding\\"][\\"integrity_impact\\"]\\n                    modified_date = report[\\"nvd_finding\\"][\\"modified_date\\"]\\n                    published_date = report[\\"nvd_finding\\"][\\"published_date\\"]\\n                    snyk_id = report[\\"nvd_finding\\"][\\"snyk_id\\"]\\n                    pkg_name = report[\\"packages\\"][0][\\"name\\"]\\n                    pkg_ver = report[\\"packages\\"][0][\\"version\\"]\\n                    pkg_type = report[\\"packages\\"][0][\\"type\\"]\\n\\n                    # Create log message and append to \\"events\\" bucket\\n                    message = str(now_time) + \\" customername.cloud.tenable.com, application=\\\\\\"container-security\\\\\\"\\" + \\", \\" + \\"image_name=\\\\\\"\\" + image_keys[\\"name\\"] + \\"\\\\\\", repo_name=\\\\\\"\\" + image_keys[\\"repo_name\\"] + \\"\\\\\\", tag=\\\\\\"\\" + image_keys[\\"tag\\"] + \\"\\\\\\", digest=\\\\\\"\\" + digest + \\"\\\\\\", risk_score=\\\\\\"\\" + str(risk_score) + \\"\\\\\\", status=\\\\\\"\\" + status + \\"\\\\\\", last_scanned=\\\\\\"\\" + last_scanned + \\"\\\\\\", uploaded_at=\\\\\\"\\" + uploaded_at + \\"\\\\\\", number_of_malware=\\\\\\"\\" + str(num_malware) + \\"\\\\\\", number_of_vulns=\\\\\\"\\" + str(num_vulns) + \\"\\\\\\", actual_vuln=\\\\\\"\\" + str(count_probs) + \\"\\\\\\", actual_malware=\\\\\\"\\" + str(num_malware) + \\"\\\\\\", access_complexity=\\\\\\"\\" + access_complexity + \\"\\\\\\", access_vector=\\\\\\"\\" + access_vector + \\"\\\\\\", auth=\\\\\\"\\" + auth + \\"\\\\\\", availability_impact=\\\\\\"\\" + availability_impact + \\"\\\\\\", cfd_impact=\\\\\\"\\" + cfd_impact + \\"\\\\\\", cve=\\\\\\"\\" + cve + \\"\\\\\\", cvss_score=\\\\\\"\\" + cvss_score + \\"\\\\\\", cvss_vector=\\\\\\"\\" + cvss_vector + \\"\\\\\\", integrity_impact=\\\\\\"\\" + integrity_impact + \\"\\\\\\", modified_date=\\\\\\"\\" + modified_date + \\"\\\\\\", published_date=\\\\\\"\\" + published_date + \\"\\\\\\", snyk_id=\\\\\\"\\" + snyk_id + \\"\\\\\\", pkg_name=\\\\\\"\\" + pkg_name + \\"\\\\\\", pkg_ver=\\\\\\"\\" + pkg_ver + \\"\\\\\\", pkg_type=\\\\\\"\\" + pkg_type + \\"\\\\\\"\\"\\n                    events.insert(-1, message)\\n\\n    # write events to the log file\\n\\n    for i in range(len(events)):\\n        with open(filepath, \\"a+\\") as file_log:\\n            file_log.seek(0)\\n            data = file_log.read(100)\\n            if len(data) > 0 :\\n                file_log.write(\\"\\\\n\\")\\n            file_log.write(events[i])\\n    print(len(events))\\n\\nif __name__ == \\"__main__\\":\\n    doit()\\n```\\n\\n\\n</details>\\n\\n### TrendMicro\\n\\n<details>\\n  <summary>Example parser for Cloud App using Python and a credential token for authentication with the API and the eventsource type specification.</summary>\\n\\n```xml title=\\"/etc/netwitness/ng/logcollection/content/collection/file/trendcloudapp.xml\\"\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<typespec>\\n\\n   <name>trendcloudapp</name>\\n   <type>file</type>\\n   <prettyName>Trend Micro Cloud App Security</prettyName>\\n   <version>1.0</version>\\n   <author>administrator</author>\\n   <description>FileCollection specification for eventsource type \\"Trend Micro Cloud App Security\\"</description>\\n\\n\\t<device>\\n\\t\\t<name>trendcloudapp</name>\\n\\t</device>\\n\\t\\n\\t<configuration>\\n\\t</configuration>\\n\\n\\t<collection>\\n\\t        <file>\\n                <parserId>trendcloudapp</parserId>\\n                <processorType>generic</processorType>\\n                <dataStartLine>1</dataStartLine>\\n\\t\\t        <fieldDelim>,</fieldDelim>\\n\\t\\t        <idField></idField>\\n\\t\\t        <lineDelim>\\\\n</lineDelim>\\n\\t\\t        <transformPrefixTag>trendcloudapp</transformPrefixTag>\\n\\t\\t        <transformReplaceFieldDelim>0</transformReplaceFieldDelim>\\n\\t\\t        <transformPrefixFilename>0</transformPrefixFilename>\\n\\t\\t        <transformMultipleDelimiterAsOne>0</transformMultipleDelimiterAsOne>\\n\\t\\t        <transformReplacementFieldDelim></transformReplacementFieldDelim>\\n\\t        </file>\\n\\t</collection>\\n</typespec>\\n```\\n\\n\\n```python title=\\"/opt/tmcas/dlp-event-parser.py\\"\\n###########################################################\\n####                                                   ####\\n#### Trend Micro Cloud App - DLP events                ####\\n####                                                   ####\\n####                                           ver.1.0 ####\\n###########################################################\\n\\nimport requests, json, datetime, time, os.path, re\\nimport dateutil.parser as dp\\nfrom datetime import timedelta\\n\\n\\n# path for testing\\n\\npath_dir = \\"/var/netwitness/logcollector/upload/trendcloudapp/trendcloudapp/\\"\\nfilepath = os.path.join(path_dir, \\"dlp-events.log\\")\\n\\n# define services to be processed\\nservices = [\\"exchange\\",\\"teams\\",\\"sharepoint\\",\\"onedrive\\"]\\n\\ndef doit():\\n\\n    # open token file:\\n    with open(\\"token.json\\", \\"r\\") as read_file:\\n        data_json = json.load(read_file)\\n    token = data_json[\\"access\\"]\\n\\n    # create \'next page link\' signaler\\n    nxtlink = 0\\n    url_maker_nxtlink = []\\n\\n    # format time interval and define the \'start\' and \'end\' ranges\\n    now_log_time = datetime.datetime.now().replace(microsecond=0).isoformat(\' \')\\n    now_time = datetime.datetime.now().replace(microsecond=0).isoformat()\\n    previous_time = datetime.datetime.now() - timedelta(hours=1, minutes=0)\\n    since = previous_time.strftime(\\"%Y-%m-%dT%H:%M:%S.000%z\\") + \'Z\'\\n    until = now_time + \'.000Z\'\\n\\n    # Start request message parameters\\n    headers = {\\n        \'Authorization\': \'Bearer \' + token,\\n        \'cache-control\': \'no-cache\',\\n    }\\n\\n    params = (\\n    (\'start\', since),\\n    (\'end\', until),\\n    (\'limit\', \'200\'),\\n    )\\n\\n    for sname in services:\\n\\n        # create event bucket and message var    \\n        events = []\\n        message = \\"\\"\\n\\n        # create the iterable URL and pass it to the API request\\n        url_maker = \\"https://api.tmcas.trendmicro.com/siem/v1/security_events?service=\\" + sname + \\"&event=dlp\\"\\n        print(url_maker)\\n        response = requests.get(url_maker, headers=headers, params=params)\\n\\n        # work the deserialized response\\n        current_incidents = json.loads(response.text)\\n\\n        # iterate in the response and format the log line message\\n        if (len(current_incidents[\\"security_events\\"]) > 0):\\n            if (current_incidents[\\"next_link\\"] != \'\'):\\n                nxtlink = 1\\n                url_maker_nxtlink.insert(-1, current_incidents[\\"next_link\\"])\\n\\n            print(len(current_incidents[\\"security_events\\"]))\\n            for index in range(len(current_incidents[\\"security_events\\"])):\\n                for key in current_incidents[\\"security_events\\"][index]:\\n                    if key == \\"event\\":\\n                        event_name = current_incidents[\\"security_events\\"][index][key]\\n                    elif key == \\"message\\":\\n                        detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                        file_name = current_incidents[\\"security_events\\"][index][key][\\"file_name\\"]\\n                        location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                        triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                        triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                        action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                        action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                        violator = current_incidents[\\"security_events\\"][index][key][\\"violator\\"]\\n                        triggered_dlp_template = current_incidents[\\"security_events\\"][index][key][\\"triggered_dlp_template\\"]\\n                        violating_content = current_incidents[\\"security_events\\"][index][key][\\"violating_content\\"]\\n                        mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                        mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                        mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                        mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                        mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                        mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n\\n                    # log message creation\\n\\n                        # convert ISO8601 time format to unix timestamp\\n\\n                        dp_detectetime = dp.parse(detection_time)\\n                        ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                        ut_detectedtime = str(ut_detectedtime)\\n\\n                        dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                        ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                        ut_mail_submittime = str(ut_mail_submittime)\\n                        \\n                        dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                        ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                        ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n                        # extract mail_message_recipient\'s emails\\n                        if len(mail_message_recipient) > 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                            recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                        elif len(mail_message_recipient) == 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n\\n                        # extract mail_message_sender\'s emails\\n                        if len(mail_message_sender) > 1:\\n                            str_mail_message_sender = \' \'.join([str(item) for item in mail_message_sender])\\n                            str_mail_message_sender = str_mail_message_sender.replace(\'\\\\\\"\', \'\')\\n                            senders_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_sender)\\n                            str_mail_message_sender = \' \'.join([str(item) for item in senders_mail])\\n                        elif len(mail_message_sender) == 1 | len(mail_message_sender) == 0 :\\n                            str_mail_message_sender = \' \'.join([str(item) for item in mail_message_sender])\\n\\n                        # extract triggered_dlp_template\'s message\\n                        if len(triggered_dlp_template) > 1:\\n                            str_triggered_dlp_template = \' \'.join([str(item) for item in triggered_dlp_template])\\n                            str_triggered_dlp_template = str_triggered_dlp_template.replace(\'\\\\\\"\', \'\')\\n                        elif len(triggered_dlp_template) == 1 | len(triggered_dlp_template) == 0 :\\n                            str_triggered_dlp_template = \' \'.join([str(item) for item in triggered_dlp_template])\\n                            str_triggered_dlp_template = str_triggered_dlp_template.replace(\'\\\\\\"\', \'\')\\n\\n                        # clean up dangerous characters\\n                        str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                        str_triggered_dlp_template = triggered_dlp_template.replace(\',\', \';\')\\n                        str_violating_content = violating_content.replace(\',\', \';\')\\n                        str_file_name = file_name.replace(\',\', \';\')\\n                        str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                        str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                        # main message creation\\n                        message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", file_name=\\\\\\"\\" + str_file_name + \\"\\\\\\", violator=\\\\\\"\\" + violator + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", triggered_dlp_template=\\\\\\"\\" + str_triggered_dlp_template +  \\"\\\\\\", violating_content=\\\\\\"\\" + str_violating_content + \\"\\\\\\"\\"\\n\\n                        events.insert(-1, message)\\n\\n    # write events to the log file \\n\\n        for i in range(len(events)):\\n            with open(filepath, \\"a+\\") as file_log:\\n                file_log.seek(0)\\n                data = file_log.read(100)\\n                if len(data) > 0 :\\n                    file_log.write(\\"\\\\n\\")\\n                file_log.write(events[i])\\n        print(len(events))\\n\\n    # check if there are a new page of events for being processed, then do it!\\n    if (nxtlink == 1):\\n        for url in url_maker_nxtlink:\\n\\n            # restate event bucket and message var    \\n            events = []\\n            message = \\"\\"\\n            \\n            print(url)\\n            print(len(url_maker_nxtlink))\\n            response = requests.get(url, headers=headers, params=params)\\n\\n            # work the deserialized response\\n            current_incidents = json.loads(response.text)\\n\\n            # iterate in the response and format the log line message\\n            if (len(current_incidents[\\"security_events\\"]) > 0):\\n\\n                if (current_incidents[\\"next_link\\"] != \'\'):\\n                    url_maker_nxtlink.insert(-1, current_incidents[\\"next_link\\"])\\n\\n                print(len(current_incidents[\\"security_events\\"]))\\n                for index in range(len(current_incidents[\\"security_events\\"])):\\n                    for key in current_incidents[\\"security_events\\"][index]:\\n                        if key == \\"event\\":\\n                            event_name = current_incidents[\\"security_events\\"][index][key]\\n                        elif key == \\"message\\":\\n                            detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                            file_name = current_incidents[\\"security_events\\"][index][key][\\"file_name\\"]\\n                            location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                            triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                            triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                            action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                            action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                            violator = current_incidents[\\"security_events\\"][index][key][\\"violator\\"]\\n                            triggered_dlp_template = current_incidents[\\"security_events\\"][index][key][\\"triggered_dlp_template\\"]\\n                            violating_content = current_incidents[\\"security_events\\"][index][key][\\"violating_content\\"]\\n                            mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                            mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                            mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                            mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                            mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                            mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n\\n                        # log message creation\\n\\n                            # convert ISO8601 time format to unix timestamp\\n\\n                            dp_detectetime = dp.parse(detection_time)\\n                            ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                            ut_detectedtime = str(ut_detectedtime)\\n\\n                            dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                            ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                            ut_mail_submittime = str(ut_mail_submittime)\\n                            \\n                            dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                            ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                            ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n                            # extract mail_message_recipient\'s emails\\n                            if len(mail_message_recipient) > 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                                str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                                recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                            elif len(mail_message_recipient) == 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n\\n                            # extract mail_message_sender\'s emails\\n                            if len(mail_message_sender) > 1:\\n                                str_mail_message_sender = \' \'.join([str(item) for item in mail_message_sender])\\n                                str_mail_message_sender = str_mail_message_sender.replace(\'\\\\\\"\', \'\')\\n                                senders_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_sender)\\n                                str_mail_message_sender = \' \'.join([str(item) for item in senders_mail])\\n                            elif len(mail_message_sender) == 1 | len(mail_message_sender) == 0 :\\n                                str_mail_message_sender = \' \'.join([str(item) for item in mail_message_sender])\\n\\n                            # extract triggered_dlp_template\'s message\\n                            if len(triggered_dlp_template) > 1:\\n                                str_triggered_dlp_template = \' \'.join([str(item) for item in triggered_dlp_template])\\n                                str_triggered_dlp_template = str_triggered_dlp_template.replace(\'\\\\\\"\', \'\')\\n                            elif len(triggered_dlp_template) == 1 | len(triggered_dlp_template) == 0 :\\n                                str_triggered_dlp_template = \' \'.join([str(item) for item in triggered_dlp_template])\\n                                str_triggered_dlp_template = str_triggered_dlp_template.replace(\'\\\\\\"\', \'\')\\n\\n                            # clean up dangerous characters\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                            str_triggered_dlp_template = triggered_dlp_template.replace(\',\', \';\')\\n                            str_violating_content = violating_content.replace(\',\', \';\')\\n                            str_file_name = file_name.replace(\',\', \';\')\\n                            str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                            str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                            # main message creation\\n                            message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", file_name=\\\\\\"\\" + str_file_name + \\"\\\\\\", violator=\\\\\\"\\" + violator + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", triggered_dlp_template=\\\\\\"\\" + str_triggered_dlp_template +  \\"\\\\\\", violating_content=\\\\\\"\\" + str_violating_content + \\"\\\\\\"\\"\\n\\n                            events.insert(-1, message)\\n\\n        # write events to the log file \\n            for i in range(len(events)):\\n                with open(filepath, \\"a+\\") as file_log:\\n                \\n                    file_log.seek(0)\\n                    data = file_log.read(100)\\n                    if len(data) > 0 :\\n                        file_log.write(\\"\\\\n\\")\\n                    file_log.write(events[i])\\n            print(len(events))\\n\\nif __name__ == \\"__main__\\":\\n    while True:\\n        doit()\\n        time.sleep(300)\\n```\\n\\n\\n```python title=\\"/opt/tmcas/ransomware-event-parser.py\\"\\n###########################################################\\n####                                                   ####\\n#### Trend Micro Cloud App - Ransomware events         ####\\n####                                                   ####\\n####                                           ver.1.0 ####\\n###########################################################\\n\\n\\nimport requests, json, datetime, time, os.path, re\\nimport dateutil.parser as dp\\nfrom datetime import timedelta\\n\\n# path for testing\\n\\npath_dir = \\"/var/netwitness/logcollector/upload/trendcloudapp/trendcloudapp/\\"\\nfilepath = os.path.join(path_dir, \\"ransomware-events.log\\")\\n\\n\\n# define services to be processed\\nservices = [\\"exchange\\",\\"teams\\",\\"sharepoint\\",\\"onedrive\\"]\\n\\n\\ndef doit():\\n\\n    # open token file:\\n    with open(\\"token.json\\", \\"r\\") as read_file:\\n        data_json = json.load(read_file)\\n    token = data_json[\\"access\\"]\\n\\n\\n    # create \'next page link\' signaler\\n    nxtlink = 0\\n    url_maker_nxtlink = []\\n\\n\\n    # format time interval and define the \'start\' and \'end\' ranges\\n    now_log_time = datetime.datetime.now().replace(microsecond=0).isoformat(\' \')\\n    now_time = datetime.datetime.now().replace(microsecond=0).isoformat()\\n    previous_time = datetime.datetime.now() - timedelta(hours=1, minutes=0)\\n    since = previous_time.strftime(\\"%Y-%m-%dT%H:%M:%S.000%z\\") + \'Z\'\\n    until = now_time + \'.000Z\'\\n\\n\\n    # Start request message parameters\\n    headers = {\\n        \'Authorization\': \'Bearer \' + token,\\n        \'cache-control\': \'no-cache\',\\n    }\\n\\n    params = (\\n    (\'start\', since),\\n    (\'end\', until),\\n    (\'limit\', \'200\'),\\n    )\\n\\n    for sname in services:\\n\\n        # create event bucket and message var    \\n        events = []\\n        message = \\"\\"\\n        \\n        # create the iterable URL and pass it to the API request\\n        url_maker = \\"https://api.tmcas.trendmicro.com/siem/v1/security_events?service=\\" + sname + \\"&event=ransomware\\"\\n        print(url_maker)\\n        response = requests.get(url_maker, headers=headers, params=params)\\n\\n        # work the deserialized response\\n        current_incidents = json.loads(response.text)\\n\\n        # iterate in the response and format the log line message\\n        if (len(current_incidents[\\"security_events\\"]) > 0):\\n            if (current_incidents[\\"next_link\\"] != \'\'):\\n                nxtlink = 1\\n                url_maker_nxtlink.insert(-1, current_incidents[\\"next_link\\"])\\n\\n            print(len(current_incidents[\\"security_events\\"]))\\n            for index in range(len(current_incidents[\\"security_events\\"])):\\n                for key in current_incidents[\\"security_events\\"][index]:\\n                    if key == \\"event\\":\\n                        event_name = current_incidents[\\"security_events\\"][index][key]\\n                    elif key == \\"message\\":\\n                        detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                        mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                        scan_type = current_incidents[\\"security_events\\"][index][key][\\"scan_type\\"]\\n                        affected_user = current_incidents[\\"security_events\\"][index][key][\\"affected_user\\"]\\n                        location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                        triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                        triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                        action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                        action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                        mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                        mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                        mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                        mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                        mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n                        mail_message_file_name = current_incidents[\\"security_events\\"][index][key][\\"mail_message_file_name\\"]\\n                        ransomware_name = current_incidents[\\"security_events\\"][index][key][\\"ransomware_name\\"]\\n\\n                    # log message creation\\n\\n                        # convert ISO8601 time format to unix timestamp\\n\\n                        dp_detectetime = dp.parse(detection_time)\\n                        ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                        ut_detectedtime = str(ut_detectedtime)\\n\\n                        dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                        ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                        ut_mail_submittime = str(ut_mail_submittime)\\n                        \\n                        dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                        ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                        ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n                        # extract mail_message_recipient\'s emails\\n                        if len(mail_message_recipient) > 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                            recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                        elif len(mail_message_recipient) == 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                        \\n                        # clean up dangerous characters\\n                        str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                        str_mail_message_file_name = mail_message_file_name.replace(\',\', \';\')\\n                        str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                        str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                        # main message creation\\n                        message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", scan_type=\\\\\\"\\" + scan_type + \\"\\\\\\", affected_user=\\\\\\"\\" + affected_user + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", mail_message_file_name=\\\\\\"\\" + str_mail_message_file_name + \\"\\\\\\", ransomware_name=\\\\\\"\\" + ransomware_name + \\"\\\\\\"\\"\\n\\n                        events.insert(-1, message)\\n\\n    # write events to the log file \\n\\n        for i in range(len(events)):\\n            with open(filepath, \\"a+\\") as file_log:\\n                file_log.seek(0)\\n                data = file_log.read(100)\\n                if len(data) > 0 :\\n                    file_log.write(\\"\\\\n\\")\\n                file_log.write(events[i])\\n        print(len(events))\\n\\n    # check if there are a new page of events for being processed, then do it!\\n    if (nxtlink == 1):\\n        for url in url_maker_nxtlink:\\n\\n            # restate event bucket and message var    \\n            events = []\\n            message = \\"\\"\\n            \\n            print(url)\\n            print(len(url_maker_nxtlink))\\n            response = requests.get(url, headers=headers, params=params)\\n\\n            # work the deserialized response\\n            current_incidents = json.loads(response.text)\\n\\n            # iterate in the response and format the log line message\\n            if (len(current_incidents[\\"security_events\\"]) > 0):\\n\\n                if (current_incidents[\\"next_link\\"] != \'\'):\\n                    url_maker_nxtlink.insert(-1, current_incidents[\\"next_link\\"])\\n\\n                print(len(current_incidents[\\"security_events\\"]))\\n                for index in range(len(current_incidents[\\"security_events\\"])):\\n                    for key in current_incidents[\\"security_events\\"][index]:\\n                        if key == \\"event\\":\\n                            event_name = current_incidents[\\"security_events\\"][index][key]\\n                        elif key == \\"message\\":\\n                            detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                            mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                            scan_type = current_incidents[\\"security_events\\"][index][key][\\"scan_type\\"]\\n                            affected_user = current_incidents[\\"security_events\\"][index][key][\\"affected_user\\"]\\n                            location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                            triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                            triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                            action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                            action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                            mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                            mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                            mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                            mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                            mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n                            mail_message_file_name = current_incidents[\\"security_events\\"][index][key][\\"mail_message_file_name\\"]\\n                            ransomware_name = current_incidents[\\"security_events\\"][index][key][\\"ransomware_name\\"]\\n\\n                        # log message creation\\n\\n                            # convert ISO8601 time format to unix timestamp\\n\\n                            dp_detectetime = dp.parse(detection_time)\\n                            ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                            ut_detectedtime = str(ut_detectedtime)\\n\\n                            dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                            ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                            ut_mail_submittime = str(ut_mail_submittime)\\n                            \\n                            dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                            ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                            ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n                            # extract mail_message_recipient\'s emails\\n                            if len(mail_message_recipient) > 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                                str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                                recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                            elif len(mail_message_recipient) == 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                            \\n                            \\n                            # clean up dangerous characters\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                            str_mail_message_file_name = mail_message_file_name.replace(\',\', \';\')\\n                            str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                            str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                            # main message creation\\n                            message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", scan_type=\\\\\\"\\" + scan_type + \\"\\\\\\", affected_user=\\\\\\"\\" + affected_user + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", mail_message_file_name=\\\\\\"\\" + str_mail_message_file_name + \\"\\\\\\", ransomware_name=\\\\\\"\\" + ransomware_name + \\"\\\\\\"\\"\\n\\n                            events.insert(-1, message)\\n\\n        # write events to the log file \\n            for i in range(len(events)):\\n                with open(filepath, \\"a+\\") as file_log:\\n                \\n                    file_log.seek(0)\\n                    data = file_log.read(100)\\n                    if len(data) > 0 :\\n                        file_log.write(\\"\\\\n\\")\\n                    file_log.write(events[i])\\n            print(len(events))\\n\\nif __name__ == \\"__main__\\":\\n    while True:\\n        doit()\\n        time.sleep(300)\\n```\\n\\n\\n```python title=\\"/opt/tmcas/securityrisk-event-parser.py\\"\\n###########################################################\\n####                                                   ####\\n#### Trend Micro Cloud App - Security Risk events      ####\\n####                                                   ####\\n####                                           ver.1.0 ####\\n###########################################################\\n\\nimport requests, json, datetime, time, os.path, re\\nimport dateutil.parser as dp\\nfrom datetime import timedelta\\n\\n# path for testing\\n\\npath_dir = \\"/var/netwitness/logcollector/upload/trendcloudapp/trendcloudapp/\\"\\nfilepath = os.path.join(path_dir, \\"securityrisk-events.log\\")\\n\\n\\n# define services to be processed\\nservices = [\\"exchange\\",\\"teams\\",\\"sharepoint\\",\\"onedrive\\"]\\n\\n\\ndef doit():\\n\\n    # open token file:\\n    with open(\\"token.json\\", \\"r\\") as read_file:\\n        data_json = json.load(read_file)\\n    token = data_json[\\"access\\"]\\n\\n    # create \'next page link\' signaler\\n    nxtlink = 0\\n    url_maker_nxtlink = []\\n\\n    # format time interval and define the \'start\' and \'end\' ranges\\n    now_log_time = datetime.datetime.now().replace(microsecond=0).isoformat(\' \')\\n    now_time = datetime.datetime.now().replace(microsecond=0).isoformat()\\n    previous_time = datetime.datetime.now() - timedelta(hours=0, minutes=30)\\n    since = previous_time.strftime(\\"%Y-%m-%dT%H:%M:%S.000%z\\") + \'Z\'\\n    until = now_time + \'.000Z\'\\n\\n    # Start request message parameters\\n    headers = {\\n        \'Authorization\': \'Bearer \' + token,\\n        \'cache-control\': \'no-cache\',\\n    }\\n\\n    params = (\\n    (\'start\', since),\\n    (\'end\', until),\\n    (\'limit\', \'200\'),\\n    )\\n\\n    for sname in services:\\n\\n        # create event bucket and message var    \\n        events = []\\n        message = \\"\\"\\n\\n        # create the iterable URL and pass it to the API request\\n        url_maker = \\"https://api.tmcas.trendmicro.com/siem/v1/security_events?service=\\" + sname + \\"&event=securityrisk\\"\\n        print(url_maker)\\n        response = requests.get(url_maker, headers=headers, params=params)\\n\\n        # work the deserialized response\\n        current_incidents = json.loads(response.text)\\n        print(current_incidents)\\n\\n        # iterate in the response and format the log line message\\n        print(current_incidents[\\"next_link\\"])\\n        if (len(current_incidents[\\"security_events\\"]) > 0):\\n            if (current_incidents[\\"next_link\\"] != \'\'):\\n                nxtlink = 1\\n                url_maker_nxtlink.insert(-1,current_incidents[\\"next_link\\"])\\n\\n            print(len(current_incidents[\\"security_events\\"]))\\n            for index in range(len(current_incidents[\\"security_events\\"])):\\n                for key in current_incidents[\\"security_events\\"][index]:\\n                    if key == \\"event\\":\\n                        event_name = current_incidents[\\"security_events\\"][index][key]\\n                    elif key == \\"message\\":\\n                        detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                        mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                        scan_type = current_incidents[\\"security_events\\"][index][key][\\"scan_type\\"]\\n                        affected_user = current_incidents[\\"security_events\\"][index][key][\\"affected_user\\"]\\n                        location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                        triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                        triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                        action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                        action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                        mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                        mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                        mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                        mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                        mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n                        mail_message_file_name = current_incidents[\\"security_events\\"][index][key][\\"mail_message_file_name\\"]\\n                        security_risk_name = current_incidents[\\"security_events\\"][index][key][\\"security_risk_name\\"]\\n                        detected_by = current_incidents[\\"security_events\\"][index][key][\\"detected_by\\"]\\n                        risk_level = current_incidents[\\"security_events\\"][index][key][\\"risk_level\\"]\\n\\n                    # log message creation\\n\\n                        # convert ISO8601 time format to unix timestamp\\n\\n                        dp_detectetime = dp.parse(detection_time)\\n                        ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                        ut_detectedtime = str(ut_detectedtime)\\n\\n                        dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                        ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                        ut_mail_submittime = str(ut_mail_submittime)\\n                        \\n                        dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                        ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                        ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n                        # extract mail_message_recipient\'s emails\\n                        if len(mail_message_recipient) > 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                            recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                        elif len(mail_message_recipient) == 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                        \\n                        str_mail_message_file_name = mail_message_file_name.replace(\',\', \';\')\\n                        str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                        str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                        # main message creation\\n                        message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", scan_type=\\\\\\"\\" + scan_type + \\"\\\\\\", affected_user=\\\\\\"\\" + affected_user + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", mail_message_file_name=\\\\\\"\\" + str_mail_message_file_name +  \\"\\\\\\", security_risk_name=\\\\\\"\\" + security_risk_name + \\"\\\\\\", detected_by=\\\\\\"\\" + detected_by + \\"\\\\\\", risk_level=\\\\\\"\\" + risk_level + \\"\\\\\\"\\"\\n\\n                        events.insert(-1, message)\\n\\n    # write events to the log file \\n\\n        for i in range(len(events)):\\n            with open(filepath, \\"a+\\") as file_log:\\n                file_log.seek(0)\\n                data = file_log.read(100)\\n                if len(data) > 0 :\\n                    file_log.write(\\"\\\\n\\")\\n                file_log.write(events[i])\\n        print(len(events))\\n\\n    # check if there are a new page of events for being processed, then do it!\\n    if (nxtlink == 1):\\n        for url in url_maker_nxtlink:\\n\\n            # restate event bucket and message var    \\n            events = []\\n            message = \\"\\"\\n            \\n            print(url)\\n            print(len(url_maker_nxtlink))\\n            response = requests.get(url, headers=headers, params=params)\\n\\n            # work the deserialized response\\n            current_incidents = json.loads(response.text)\\n\\n            # iterate in the response and format the log line message\\n            if (len(current_incidents[\\"security_events\\"]) > 0):\\n\\n                if (current_incidents[\\"next_link\\"] != \'\'):\\n                    url_maker_nxtlink.insert(-1, current_incidents[\\"next_link\\"])\\n\\n                print(len(current_incidents[\\"security_events\\"]))\\n                for index in range(len(current_incidents[\\"security_events\\"])):\\n                    for key in current_incidents[\\"security_events\\"][index]:\\n                        if key == \\"event\\":\\n                            event_name = current_incidents[\\"security_events\\"][index][key]\\n                        elif key == \\"message\\":\\n                            detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                            mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                            scan_type = current_incidents[\\"security_events\\"][index][key][\\"scan_type\\"]\\n                            affected_user = current_incidents[\\"security_events\\"][index][key][\\"affected_user\\"]\\n                            location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                            triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                            triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                            action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                            action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                            mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                            mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                            mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                            mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                            mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n                            mail_message_file_name = current_incidents[\\"security_events\\"][index][key][\\"mail_message_file_name\\"]\\n                            risk_level = current_incidents[\\"security_events\\"][index][key][\\"risk_level\\"]\\n                            security_risk_name = current_incidents[\\"security_events\\"][index][key][\\"security_risk_name\\"]\\n                            detected_by = current_incidents[\\"security_events\\"][index][key][\\"detected_by\\"]\\n                            risk_level = current_incidents[\\"security_events\\"][index][key][\\"risk_level\\"]\\n\\n                        # log message creation\\n\\n                            # convert ISO8601 time format to unix timestamp\\n\\n                            dp_detectetime = dp.parse(detection_time)\\n                            ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                            ut_detectedtime = str(ut_detectedtime)\\n\\n                            dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                            ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                            ut_mail_submittime = str(ut_mail_submittime)\\n                            \\n                            dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                            ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                            ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n                            # extract mail_message_recipient\'s emails\\n                            if len(mail_message_recipient) > 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                                str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                                recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                                str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                            elif len(mail_message_recipient) == 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n\\n                            # clean up dangerous characters\\n                            str_mail_message_file_name = mail_message_file_name.replace(\',\', \';\')\\n                            str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                            str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                            # main message creation\\n                            message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", scan_type=\\\\\\"\\" + scan_type + \\"\\\\\\", affected_user=\\\\\\"\\" + affected_user + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", mail_message_file_name=\\\\\\"\\" + str_mail_message_file_name +  \\"\\\\\\", security_risk_name=\\\\\\"\\" + security_risk_name + \\"\\\\\\", detected_by=\\\\\\"\\" + detected_by + \\"\\\\\\", risk_level=\\\\\\"\\" + risk_level + \\"\\\\\\"\\"\\n\\n                            events.insert(-1, message)\\n\\n            # write events to the log file \\n            for i in range(len(events)):\\n                with open(filepath, \\"a+\\") as file_log:\\n                \\n                    file_log.seek(0)\\n                    data = file_log.read(100)\\n                    if len(data) > 0 :\\n                        file_log.write(\\"\\\\n\\")\\n                    file_log.write(events[i])\\n            print(len(events))\\n\\nif __name__ == \\"__main__\\":\\n    while True:\\n        doit()\\n        time.sleep(300)\\n```\\n\\n\\n```python title=\\"/opt/tmcas/virtualanalyzer-event-parser.py\\"\\n###########################################################\\n####                                                   ####\\n#### Trend Micro Cloud App - Virtual Analyzer events   ####\\n####                                                   ####\\n####                                           ver.1.0 ####\\n###########################################################\\n\\nimport requests, json, datetime, time, os.path, re\\nimport dateutil.parser as dp\\nfrom datetime import timedelta\\n\\n# path for testing\\n\\npath_dir = \\"/var/netwitness/logcollector/upload/trendcloudapp/trendcloudapp/\\"\\nfilepath = os.path.join(path_dir, \\"virtualanalyzer-events.log\\")\\n\\n\\n# define services to be processed\\nservices = [\\"exchange\\",\\"teams\\",\\"sharepoint\\",\\"onedrive\\"]\\n\\n\\ndef doit():\\n\\n    # open token file:\\n    with open(\\"token.json\\", \\"r\\") as read_file:\\n        data_json = json.load(read_file)\\n    token = data_json[\\"access\\"]\\n\\n\\n    # create \'next page link\' signaler\\n    nxtlink = 0\\n    url_maker_nxtlink = []\\n\\n\\n    # format time interval and define the \'start\' and \'end\' ranges\\n    now_log_time = datetime.datetime.now().replace(microsecond=0).isoformat(\' \')\\n    now_time = datetime.datetime.now().replace(microsecond=0).isoformat()\\n    previous_time = datetime.datetime.now() - timedelta(hours=1, minutes=0)\\n    since = previous_time.strftime(\\"%Y-%m-%dT%H:%M:%S.000%z\\") + \'Z\'\\n    until = now_time + \'.000Z\'\\n\\n    # Start request message parameters\\n    headers = {\\n        \'Authorization\': \'Bearer \' + token,\\n        \'cache-control\': \'no-cache\',\\n    }\\n\\n    params = (\\n    (\'start\', since),\\n    (\'end\', until),\\n    (\'limit\', \'200\'),\\n    )\\n\\n    for sname in services:\\n        \\n        # create event bucket and message var    \\n        events = []\\n        message = \\"\\"\\n\\n        # create the iterable URL and pass it to the API request\\n        url_maker = \\"https://api.tmcas.trendmicro.com/siem/v1/security_events?service=\\" + sname + \\"&event=virtualanalyzer\\"\\n        print(url_maker)\\n        response = requests.get(url_maker, headers=headers, params=params)\\n\\n        # work the deserialized response\\n        current_incidents = json.loads(response.text)\\n\\n        # iterate in the response and format the log line message\\n        if (len(current_incidents[\\"security_events\\"]) > 0):\\n            if (current_incidents[\\"next_link\\"] != \'\'):\\n                nxtlink = 1\\n                url_maker_nxtlink.insert(-1, current_incidents[\\"next_link\\"])\\n\\n            print(len(current_incidents[\\"security_events\\"]))\\n            for index in range(len(current_incidents[\\"security_events\\"])):\\n                for key in current_incidents[\\"security_events\\"][index]:\\n                    if key == \\"event\\":\\n                        event_name = current_incidents[\\"security_events\\"][index][key]\\n                    elif key == \\"message\\":\\n                        detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                        mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                        scan_type = current_incidents[\\"security_events\\"][index][key][\\"scan_type\\"]\\n                        affected_user = current_incidents[\\"security_events\\"][index][key][\\"affected_user\\"]\\n                        location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                        triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                        triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                        action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                        action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                        mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                        mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                        mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                        mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                        mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n                        mail_message_file_name = current_incidents[\\"security_events\\"][index][key][\\"mail_message_file_name\\"]\\n                        risk_level = current_incidents[\\"security_events\\"][index][key][\\"risk_level\\"]\\n                        detection_type = current_incidents[\\"security_events\\"][index][key][\\"detection_type\\"]\\n                        file_sha1 = current_incidents[\\"security_events\\"][index][key][\\"file_sha1\\"]\\n                        file_sha256 = current_incidents[\\"security_events\\"][index][key][\\"file_sha256\\"]\\n\\n                    # log message creation\\n\\n                        # convert ISO8601 time format to unix timestamp\\n\\n                        dp_detectetime = dp.parse(detection_time)\\n                        ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                        ut_detectedtime = str(ut_detectedtime)\\n\\n                        dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                        ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                        ut_mail_submittime = str(ut_mail_submittime)\\n                        \\n                        dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                        ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                        ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n\\n                        # extract mail_message_recipient\'s emails\\n                        if len(mail_message_recipient) > 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                            recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                            str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                        elif len(mail_message_recipient) == 1:\\n                            str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                        \\n                        # clean up dangerous characters\\n                        str_mail_message_file_name = mail_message_file_name.replace(\',\', \';\')\\n                        str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                        str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                        # main message creation\\n                        message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", scan_type=\\\\\\"\\" + scan_type + \\"\\\\\\", affected_user=\\\\\\"\\" + affected_user + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", mail_message_file_name=\\\\\\"\\" + str_mail_message_file_name + \\"\\\\\\", risk_level=\\\\\\"\\" + risk_level + \\"\\\\\\", detection_type=\\\\\\"\\" + detection_type + \\"\\\\\\", file_sha1=\\\\\\"\\" + file_sha1 + \\"\\\\\\", file_sha256=\\\\\\"\\" + file_sha256 + \\"\\\\\\"\\"\\n\\n                        events.insert(-1, message)\\n\\n    # write events to the log file \\n\\n        for i in range(len(events)):\\n            with open(filepath, \\"a+\\") as file_log:\\n                file_log.seek(0)\\n                data = file_log.read(100)\\n                if len(data) > 0 :\\n                    file_log.write(\\"\\\\n\\")\\n                file_log.write(events[i])\\n        print(len(events))\\n\\n    # check if there are a new page of events for being processed, then do it!\\n    if (nxtlink == 1):\\n\\n        for url in url_maker_nxtlink:\\n\\n            # restate event bucket and message var    \\n            events = []\\n            message = \\"\\"\\n            \\n            print(url)\\n            print(len(url_maker_nxtlink))\\n            response = requests.get(url, headers=headers, params=params)\\n\\n            # work the deserialized response\\n            current_incidents = json.loads(response.text)\\n\\n            # iterate in the response and format the log line message\\n            if (len(current_incidents[\\"security_events\\"]) > 0):\\n                \\n                if (current_incidents[\\"next_link\\"] != \'\'):\\n                    url_maker_nxtlink.insert(-1, current_incidents[\\"next_link\\"])\\n\\n                print(len(current_incidents[\\"security_events\\"]))\\n                for index in range(len(current_incidents[\\"security_events\\"])):\\n                    for key in current_incidents[\\"security_events\\"][index]:\\n                        if key == \\"event\\":\\n                            event_name = current_incidents[\\"security_events\\"][index][key]\\n                        elif key == \\"message\\":\\n                            detection_time = current_incidents[\\"security_events\\"][index][key][\\"detection_time\\"]\\n                            mail_message_recipient = current_incidents[\\"security_events\\"][index][key][\\"mail_message_recipient\\"]\\n                            scan_type = current_incidents[\\"security_events\\"][index][key][\\"scan_type\\"]\\n                            affected_user = current_incidents[\\"security_events\\"][index][key][\\"affected_user\\"]\\n                            location = current_incidents[\\"security_events\\"][index][key][\\"location\\"]\\n                            triggered_policy_name = current_incidents[\\"security_events\\"][index][key][\\"triggered_policy_name\\"]\\n                            triggered_security_filter = current_incidents[\\"security_events\\"][index][key][\\"triggered_security_filter\\"]\\n                            action = current_incidents[\\"security_events\\"][index][key][\\"action\\"]\\n                            action_result = current_incidents[\\"security_events\\"][index][key][\\"action_result\\"]\\n                            mail_message_id = current_incidents[\\"security_events\\"][index][key][\\"mail_message_id\\"]\\n                            mail_message_sender = current_incidents[\\"security_events\\"][index][key][\\"mail_message_sender\\"]\\n                            mail_message_submit_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_submit_time\\"]\\n                            mail_message_delivery_time = current_incidents[\\"security_events\\"][index][key][\\"mail_message_delivery_time\\"]\\n                            mail_message_subject = current_incidents[\\"security_events\\"][index][key][\\"mail_message_subject\\"]\\n                            mail_message_file_name = current_incidents[\\"security_events\\"][index][key][\\"mail_message_file_name\\"]\\n                            risk_level = current_incidents[\\"security_events\\"][index][key][\\"risk_level\\"]\\n                            detection_type = current_incidents[\\"security_events\\"][index][key][\\"detection_type\\"]\\n                            file_sha1 = current_incidents[\\"security_events\\"][index][key][\\"file_sha1\\"]\\n                            file_sha256 = current_incidents[\\"security_events\\"][index][key][\\"file_sha256\\"]\\n\\n                        # log message creation\\n\\n                            # convert ISO8601 time format to unix timestamp\\n\\n                            dp_detectetime = dp.parse(detection_time)\\n                            ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                            ut_detectedtime = str(ut_detectedtime)\\n\\n                            dp_mail_submittime = dp.parse(mail_message_submit_time)\\n                            ut_mail_submittime = int(time.mktime(dp_mail_submittime.timetuple()))\\n                            ut_mail_submittime = str(ut_mail_submittime)\\n                            \\n                            dp_mail_deliverytime = dp.parse(mail_message_delivery_time)\\n                            ut_mail_deliverytime = int(time.mktime(dp_mail_deliverytime.timetuple()))\\n                            ut_mail_deliverytime = str(ut_mail_deliverytime)\\n\\n                            # extract mail_message_recipient\'s emails\\n                            if len(mail_message_recipient) > 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                                str_mail_message_recipient = str_mail_message_recipient.replace(\'\\\\\\"\', \'\')\\n                                recipients_mail = re.findall(r\'[a-z0-9.\\\\-+_]+@[a-z0-9.\\\\-+_]+\\\\.[a-z]+\', str_mail_message_recipient)\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in recipients_mail])\\n                                str_mail_message_recipient = str_mail_message_recipient.replace(\' \', \';\')\\n                            elif len(mail_message_recipient) == 1:\\n                                str_mail_message_recipient = \' \'.join([str(item) for item in mail_message_recipient])\\n                            \\n                            str_mail_message_file_name = mail_message_file_name.replace(\',\', \';\')\\n                            str_mail_message_subject = mail_message_subject.replace(\',\', \';\')\\n                            str_mail_message_sender = mail_message_sender.replace(\'\\\\\\"\', \'\')\\n\\n                            # main message creation\\n                            message = str(now_log_time) + \\" tmcas.customername.com, application=\\\\\\"tmcas-\\" + sname + \\"-\\"+ event_name + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", scan_type=\\\\\\"\\" + scan_type + \\"\\\\\\", affected_user=\\\\\\"\\" + affected_user + \\"\\\\\\", location=\\\\\\"\\" + location + \\"\\\\\\", triggered_policy_name=\\\\\\"\\" + triggered_policy_name + \\"\\\\\\", triggered_security_filter=\\\\\\"\\" + triggered_security_filter + \\"\\\\\\", action=\\\\\\"\\" + action + \\"\\\\\\", action_result=\\\\\\"\\" + action_result + \\"\\\\\\", mail_message_id=\\\\\\"\\" + mail_message_id + \\"\\\\\\", mail_message_sender=\\\\\\"\\" + str_mail_message_sender + \\"\\\\\\", mail_message_recipient=\\\\\\"\\" + str_mail_message_recipient + \\"\\\\\\", mail_message_submit_time=\\\\\\"\\" + ut_mail_submittime + \\"\\\\\\", mail_message_delivery_time=\\\\\\"\\" + ut_mail_deliverytime + \\"\\\\\\", mail_message_subject=\\\\\\"\\" + str_mail_message_subject + \\"\\\\\\", mail_message_file_name=\\\\\\"\\" + str_mail_message_file_name + \\"\\\\\\", risk_level=\\\\\\"\\" + risk_level + \\"\\\\\\", detection_type=\\\\\\"\\" + detection_type + \\"\\\\\\", file_sha1=\\\\\\"\\" + file_sha1 + \\"\\\\\\", file_sha256=\\\\\\"\\" + file_sha256 + \\"\\\\\\"\\"\\n\\n                            events.insert(-1, message)\\n\\n        # write events to the log file \\n            for i in range(len(events)):\\n                with open(filepath, \\"a+\\") as file_log:\\n                \\n                    file_log.seek(0)\\n                    data = file_log.read(100)\\n                    if len(data) > 0 :\\n                        file_log.write(\\"\\\\n\\")\\n                    file_log.write(events[i])\\n            print(len(events))\\n\\n\\nif __name__ == \\"__main__\\":\\n    while True:\\n        doit()\\n        time.sleep(300)\\n```\\n\\n```json title=\\"/opt/tmcas/token.json\\"\\n{\\"token_type\\":\\"Bearer\\",\\"expires_in\\":\\"unknown\\",\\"access\\":\\"MYBEARERTOKEN\\"}\\n```\\n\\n</details>\\n\\n<details>\\n  <summary>Example parser for XDR using Python and a credential token for authentication with the API and the eventsource type specification.</summary>\\n\\n```xml title=\\"/etc/netwitness/ng/logcollection/content/collection/file/trendmicroxdr.xml\\"\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<typespec>\\n\\n   <name>trendmicroxdr</name>\\n   <type>file</type>\\n   <prettyName>Trend Micro XDR</prettyName>\\n   <version>1.0</version>\\n   <author>administrator</author>\\n   <description>FileCollection specification for eventsource type \\"Trend Micro XDR Solution\\"</description>\\n\\n\\t<device>\\n\\t\\t<name>trendmicroxdr</name>\\n\\t</device>\\n\\t\\n\\t<configuration>\\n\\t</configuration>\\n\\n\\t<collection>\\n\\t        <file>\\n                <parserId>trendmicroxdr</parserId>\\n                <processorType>generic</processorType>\\n                <dataStartLine>1</dataStartLine>\\n\\t\\t        <fieldDelim>,</fieldDelim>\\n\\t\\t        <idField></idField>\\n\\t\\t        <lineDelim>\\\\n</lineDelim>\\n\\t\\t        <transformPrefixTag>trendmicroxdr</transformPrefixTag>\\n\\t\\t        <transformReplaceFieldDelim>0</transformReplaceFieldDelim>\\n\\t\\t        <transformPrefixFilename>0</transformPrefixFilename>\\n\\t\\t        <transformMultipleDelimiterAsOne>0</transformMultipleDelimiterAsOne>\\n\\t\\t        <transformReplacementFieldDelim></transformReplacementFieldDelim>\\n\\t        </file>\\n\\t</collection>\\n</typespec>\\n```\\n\\n```python title=\\"/opt/tmxdr/tmxdr-attack-techniques.py\\"\\nimport requests, json, datetime, time, os.path, re\\nimport dateutil.parser as dp\\nfrom datetime import timedelta\\n\\n# Base URL for the requested resources\\n\\nurl_base = \'https://api.xdr.trendmicro.com\'\\nurl_path = \'/v2.0/xdr/oat/detections\'\\n\\n# Path to save logs to\\npath_dir = \\"/var/netwitness/logcollector/upload/trendmicroxdr/trendmicroxdr/\\"\\nfilepath = os.path.join(path_dir, \\"attack-techniques-events.log\\")\\n\\n\\ndef doit():\\n\\n    # open token file:\\n    with open(\\"/opt/tmxdr/token.json\\", \\"r\\") as read_file:\\n        data_json = json.load(read_file)\\n    token = data_json[\\"access\\"]\\n\\n    # create \'next page link\' signaler\\n    nxtlink = 0\\n    token_nxtlink = \\"\\"\\n\\n    ################### ADJUST TIME PARAMETERS #######################\\n    ## format time interval and define the \'start\' and \'end\' ranges ##\\n    ##################################################################\\n\\n    now_log_time = datetime.datetime.now().replace(microsecond=0).isoformat(\' \')\\n    now_time = datetime.datetime.now().replace(microsecond=0).isoformat()\\n    previous_time = datetime.datetime.now() - timedelta(hours=0, minutes=5)\\n\\n    since = previous_time.strftime(\\"%Y-%m-%dT%H:%M:%S.000%z\\") + \'Z\'\\n    until = now_time\\n\\n    # convert \'since\' to timestamp format\\n    dp_since = dp.parse(since)\\n    ut_since = int(time.mktime(dp_since.timetuple()))\\n    ut_since = str(ut_since)\\n\\n    # convert \'until\' to timestamp format\\n    dp_until = dp.parse(until)\\n    ut_until = int(time.mktime(dp_until.timetuple()))\\n    ut_until = str(ut_until)\\n\\n    # Start request message parameters\\n    headers = {\'Authorization\': \'Bearer \' + token, \'Content-Type\': \'application/json;charset=utf-8\'}\\n\\n\\n    params = (\\n    (\'start\', ut_since),\\n    (\'end\', ut_until),\\n    (\'size\', \'10\')\\n    )\\n\\n    # create event bucket and message var    \\n    events = []\\n    message = \\"\\"\\n\\n    # request event alerts\\n    response = requests.get(url_base + url_path, headers=headers, params=params)\\n    print(response.url)\\n\\n    # work the deserialized response\\n    current_incidents = json.loads(response.text)\\n    response = \\"\\"\\n\\n    # iterate in the response and format the log line message\\n    if len(current_incidents[\\"data\\"][\\"detections\\"]) > 0:\\n\\n        hasToken = current_incidents[\\"data\\"].get(\\"nextBatchToken\\")\\n        if hasToken == None:\\n            nxtlink = 0\\n            print(\\"Events finished\\")\\n\\n        else:\\n            nxtlink = 1\\n            token_nxtlink = current_incidents[\\"data\\"][\\"nextBatchToken\\"]\\n\\n        events = []\\n        message = \\"\\"\\n\\n        for index in range(len(current_incidents[\\"data\\"][\\"detections\\"])):\\n            for key in current_incidents[\\"data\\"][\\"detections\\"][index]:\\n                if key == \\"source\\":\\n                    det_source = current_incidents[\\"data\\"][\\"detections\\"][index][key]\\n                elif key == \\"detectionTime\\":\\n                    detection_time = current_incidents[\\"data\\"][\\"detections\\"][index][key]\\n                elif key == \\"uuid\\":\\n                    uuid = current_incidents[\\"data\\"][\\"detections\\"][index][key]\\n                elif key == \\"endpoint\\":\\n                    endpoint_name = current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"name\\"]\\n                    endpoint_guid = current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"guid\\"]\\n                    if len(current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"ips\\"]) > 1:\\n                        endpoint_ip = \';\'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"ips\\"]])\\n                    else:\\n                        endpoint_ip = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"ips\\"]])\\n\\n                elif key == \\"filters\\":\\n                    for filter in range(len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"])):\\n                        for k in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter]:\\n                            \\n                            if k == \\"id\\":\\n                                filter_id = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                            elif k == \\"unique_id\\":\\n                                filter_uid = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                            elif k == \\"level\\":\\n                                filter_level = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                            elif k == \\"name\\":\\n                                filter_name = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                            elif k == \\"description\\":\\n                                filter_description = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                            elif k == \\"tactics\\":\\n                                \\n                                if len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"tactics\\"]) > 1:\\n                                    tactics = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"tactics\\"]])\\n                                    tactics = tactics.replace(\' \', \';\')\\n                                else:\\n                                    tactics = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"tactics\\"]])\\n                            \\n                            elif k == \\"techniques\\":\\n                            \\n                                if len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"techniques\\"]) > 1:\\n                                    techniques = \';\'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"techniques\\"]])\\n                                else:\\n                                    techniques = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"techniques\\"]])\\n                            \\n                            elif k == \\"highlightedObjects\\":\\n                                \\n                                if len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"]) > 1:\\n                                    fld1 = []\\n                                    value1 = []\\n                                    highlights = []\\n\\n                                    for object in range(len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"])):\\n                                        \\n                                        for kye in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][object]:\\n                                            if kye == \\"field\\":\\n                                                fieldName = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][object][kye]\\n                                                fld1.insert(1, fieldName)\\n                                            elif kye == \\"value\\":\\n                                                valueName = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][object][kye]\\n                                                isArray = isinstance(valueName, list)\\n                                                if (isArray == True):\\n                                                    valueName = \';\'.join([str(item) for item in valueName])\\n                                                    valueName = valueName.replace(\'{\', \'\\\\{\')\\n                                                    valueName = valueName.replace(\'}\', \'\\\\}\')\\n                                                    valueName = valueName.replace(\'\\\\\\"\', \'\\\\\\\\\\\\\'\')\\n                                                else:\\n                                                    valueName = str(valueName)\\n                                                    valueName = valueName.replace(\'{\', \'\\\\{\')\\n                                                    valueName = valueName.replace(\'}\', \'\\\\}\')\\n                                                    valueName = valueName.replace(\'\\\\\\"\', \'\\\\\\\\\\\\\'\')\\n                                                value1.insert(1, valueName)\\n\\n                                    for flditems in range(len(fld1)):\\n                                        highlighted = fld1[flditems] +\\"=\\\\\\"\\" + value1[flditems] + \\"\\\\\\"\\"\\n                                        highlights.insert(1, highlighted)\\n\\n                                    highlightedObj = \', \'.join([str(item) for item in highlights])\\n                                    \\n                                else:\\n                                    fld1 = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][0][\\"field\\"]\\n                                    value1 = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][0][\\"value\\"]\\n                                    value1 = value1.replace(\'{\', \'\\\\{\')\\n                                    value1 = value1.replace(\'}\', \'\\\\}\')\\n                                    value1 = value1.replace(\'\\\\\\"\', \'\\\\\\\\\\\\\'\')\\n                                    highlightedObj = fld1 + \\"=\\\\\\"\\" + value1 + \\"\\\\\\"\\"\\n\\n            # convert ISO8601 time format to unix timestamp\\n\\n            dp_detectetime = dp.parse(detection_time)\\n            ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n            ut_detectedtime = str(ut_detectedtime)\\n\\n            message = str(now_log_time) + \\" tmxdr.customername.com, application=\\\\\\"trendmicroxdr-\\" + det_source + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", uuid=\\\\\\"\\" + uuid + \\"\\\\\\", endpoint=\\\\\\"\\" + endpoint_name + \\"\\\\\\", endpoint_guid=\\\\\\"\\" + endpoint_guid + \\"\\\\\\", endpoint_ip=\\\\\\"\\" + endpoint_ip + \\"\\\\\\", filter_id=\\\\\\"\\" + filter_id + \\"\\\\\\", filter_uid=\\\\\\"\\" + filter_uid + \\"\\\\\\", filter_level=\\\\\\"\\" + filter_level + \\"\\\\\\", filter_name=\\\\\\"\\" + filter_name + \\"\\\\\\", filter_description=\\\\\\"\\" + filter_description +\\"\\\\\\", tactics=\\\\\\"\\" + tactics + \\"\\\\\\", techniques=\\\\\\"\\" + techniques + \\"\\\\\\", \\" + highlightedObj\\n\\n            events.insert(-1, message)\\n    current_incidents = {}\\n\\n    # write events to the log file \\n    for i in range(len(events)):\\n        with open(filepath, \\"a+\\") as file_log:\\n            file_log.seek(0)\\n            data = file_log.read(100)\\n            if len(data) > 0 :\\n                file_log.write(\\"\\\\n\\")\\n            file_log.write(events[i])\\n    print(len(events))\\n\\n    # check if there are a new page of events for being processed, then do it!\\n    while (nxtlink == 1):\\n\\n        # restate event bucket and message var    \\n        events = []\\n        message = \\"\\"\\n\\n        params = (\\n            (\'start\', ut_since),\\n            (\'end\', ut_until),\\n            (\'size\', \'10\'),\\n            (\'nextBatchToken\', token_nxtlink),\\n        )\\n\\n        headers = {\'Authorization\': \'Bearer \' + token, \'Content-Type\': \'application/json;charset=utf-8\'}\\n        \\n        # request event alerts\\n        response = requests.get(url_base + url_path, headers=headers, params=params)\\n        \\n        # work the deserialized response\\n        current_incidents = json.loads(response.text)\\n        response = \\"\\"\\n\\n        # iterate in the response and format the log line message\\n        if len(current_incidents[\\"data\\"][\\"detections\\"]) > 0:\\n\\n            hasToken = current_incidents[\\"data\\"].get(\\"nextBatchToken\\")\\n            if (hasToken == None):\\n                nxtlink = 0\\n                token_nxtlink = \\"\\"\\n                print(\\"Events finished\\")\\n            else:\\n                nxtlink = 1\\n                token_nxtlink = current_incidents[\\"data\\"][\\"nextBatchToken\\"]\\n\\n            for index in range(len(current_incidents[\\"data\\"][\\"detections\\"])):\\n                for key in current_incidents[\\"data\\"][\\"detections\\"][index]:\\n                    if key == \\"source\\":\\n                        det_source = current_incidents[\\"data\\"][\\"detections\\"][index][key]\\n                    elif key == \\"detectionTime\\":\\n                        detection_time = current_incidents[\\"data\\"][\\"detections\\"][index][key]\\n                    elif key == \\"uuid\\":\\n                        uuid = current_incidents[\\"data\\"][\\"detections\\"][index][key]\\n                    elif key == \\"endpoint\\":\\n                        endpoint_name = current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"name\\"]\\n                        endpoint_guid = current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"guid\\"]\\n                        if len(current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"ips\\"]) > 1:\\n                            endpoint_ip = \';\'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"ips\\"]])\\n                        else:\\n                            endpoint_ip = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][key][\\"ips\\"]])\\n\\n                    elif key == \\"filters\\":\\n                        for filter in range(len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"])):\\n                            for k in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter]:\\n                                \\n                                if k == \\"id\\":\\n                                    filter_id = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                                elif k == \\"unique_id\\":\\n                                    filter_uid = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                                elif k == \\"level\\":\\n                                    filter_level = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                                elif k == \\"name\\":\\n                                    filter_name = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                                elif k == \\"description\\":\\n                                    filter_description = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][k]\\n                                elif k == \\"tactics\\":\\n                                    \\n                                    if len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"tactics\\"]) > 1:\\n                                        tactics = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"tactics\\"]])\\n                                        tactics = tactics.replace(\' \', \';\')\\n                                    else:\\n                                        tactics = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"tactics\\"]])\\n                                \\n                                elif k == \\"techniques\\":\\n                                \\n                                    if len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"techniques\\"]) > 1:\\n                                        techniques = \';\'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"techniques\\"]])\\n                                    else:\\n                                        techniques = \' \'.join([str(item) for item in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"techniques\\"]])\\n                                \\n                                elif k == \\"highlightedObjects\\":\\n                                    \\n                                    if len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"]) > 1:\\n                                        fld1 = []\\n                                        value1 = []\\n                                        highlights = []\\n\\n                                        for object in range(len(current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"])):\\n                                            \\n                                            for kye in current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][object]:\\n                                                if kye == \\"field\\":\\n                                                    fieldName = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][object][kye]\\n                                                    fld1.insert(1, fieldName)\\n                                                elif kye == \\"value\\":\\n                                                    valueName = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][object][kye]\\n                                                    isArray = isinstance(valueName, list)\\n                                                    if (isArray == True):\\n                                                        valueName = \';\'.join([str(item) for item in valueName])\\n                                                        valueName = valueName.replace(\'{\', \'\\\\{\')\\n                                                        valueName = valueName.replace(\'}\', \'\\\\}\')\\n                                                        valueName = valueName.replace(\'\\\\\\"\', \'\\\\\\\\\\\\\'\')\\n                                                    else:\\n                                                        valueName = str(valueName)\\n                                                        valueName = valueName.replace(\'{\', \'\\\\{\')\\n                                                        valueName = valueName.replace(\'}\', \'\\\\}\')\\n                                                        valueName = valueName.replace(\'\\\\\\"\', \'\\\\\\\\\\\\\'\')\\n                                                    value1.insert(1, valueName)\\n\\n                                        for flditems in range(len(fld1)):\\n                                            highlighted = fld1[flditems] +\\"=\\\\\\"\\" + value1[flditems] + \\"\\\\\\"\\"\\n                                            highlights.insert(1, highlighted)\\n\\n                                        highlightedObj = \', \'.join([str(item) for item in highlights])\\n                                        \\n                                    else:\\n                                        fld1 = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][0][\\"field\\"]\\n                                        value1 = current_incidents[\\"data\\"][\\"detections\\"][index][\\"filters\\"][filter][\\"highlightedObjects\\"][0][\\"value\\"]\\n                                        value1 = value1.replace(\'{\', \'\\\\{\')\\n                                        value1 = value1.replace(\'}\', \'\\\\}\')\\n                                        value1 = value1.replace(\'\\\\\\"\', \'\\\\\\\\\\\\\'\')\\n                                        highlightedObj = fld1 + \\"=\\\\\\"\\" + value1 + \\"\\\\\\"\\"\\n\\n                # convert ISO8601 time format to unix timestamp\\n\\n                dp_detectetime = dp.parse(detection_time)\\n                ut_detectedtime = int(time.mktime(dp_detectetime.timetuple()))\\n                ut_detectedtime = str(ut_detectedtime)\\n\\n                message = str(now_log_time) + \\" tmxdr.customername.com, application=\\\\\\"trendmicroxdr-\\" + det_source + \\"\\\\\\", detectedutc=\\\\\\"\\" + ut_detectedtime + \\"\\\\\\", uuid=\\\\\\"\\" + uuid + \\"\\\\\\", endpoint=\\\\\\"\\" + endpoint_name + \\"\\\\\\", endpoint_guid=\\\\\\"\\" + endpoint_guid + \\"\\\\\\", endpoint_ip=\\\\\\"\\" + endpoint_ip + \\"\\\\\\", filter_id=\\\\\\"\\" + filter_id + \\"\\\\\\", filter_uid=\\\\\\"\\" + filter_uid + \\"\\\\\\", filter_level=\\\\\\"\\" + filter_level + \\"\\\\\\", filter_name=\\\\\\"\\" + filter_name + \\"\\\\\\", filter_description=\\\\\\"\\" + filter_description +\\"\\\\\\", tactics=\\\\\\"\\" + tactics + \\"\\\\\\", techniques=\\\\\\"\\" + techniques + \\"\\\\\\", \\" + highlightedObj\\n\\n                events.insert(-1, message)\\n        current_incidents = {}\\n\\n        # write events to the log file \\n        for i in range(len(events)):\\n            with open(filepath, \\"a+\\") as file_log:\\n            \\n                file_log.seek(0)\\n                data = file_log.read(100)\\n                if len(data) > 0 :\\n                    file_log.write(\\"\\\\n\\")\\n                file_log.write(events[i])\\n        print(len(events))        \\n\\nif __name__ == \\"__main__\\":\\n    while True:\\n        doit()\\n        time.sleep(300)\\n```\\n\\n```json title=\\"/opt/tmcas/token.json\\"\\n{\\"token_type\\":\\"Bearer\\",\\"expires_in\\":\\"unknown\\",\\"access\\":\\"MYBEARERTOKENHERE\\"}\\n```\\n</details>\\n\\n\\n\\n## References\\n\\n[\\"How to Create a Custom FileSpec for Log Collection using RSA NetWitness Platform\\"](https://www.youtube.com/watch?v=xK6XjzaWvX0)\\n\\n[\\"RSA NetWitness Platform \u201cHow To\u201d Informational Videos\\"](https://www.youtube.com/playlist?list=PL69kuTXA1Iatq3MKjY3Ydw2J7GdMF8wKD)\\n\\n[\\"Log Parser Tool v1.1 User Guide\\"](https://community.netwitness.com//t5/netwitness-platform-threat/log-parser-tool-v1-1-user-guide/ta-p/565941)\\n\\n[\\"Log Parser Tool v1.1.0\\"](https://community.netwitness.com/t5/netwitness-knowledge-base/where-can-i-download-the-rsa-netwitness-log-parser-tool/ta-p/677455)[1](https://disk.yandex.com/d/L9GbPudQQAuPAQ)\\n\\n[\\"Log Parser Video Tutorials\\"](https://disk.yandex.com/d/ecJYm4xzv23cfg)\\n\\n[\\"Parsers Book\\"](https://disk.yandex.com/d/p9zY_RRy7e4svA)\\n\\n[\\"Parsers guides and stuffs\\"](https://disk.yandex.com/d/C7xPJU9cbP284Q)"},{"id":"pod-recurrent-restarts","metadata":{"permalink":"/pod-recurrent-restarts","source":"@site/blog/2024-05-03-pod-recurrent-restarts/index.mdx","title":"Pod Recurrent Restarts via Cronjobs","description":"Ever wondered how to cycle your deployment/pods the native way? Think no more!","date":"2024-05-03T00:00:00.000Z","tags":[{"inline":true,"label":"blogging","permalink":"/tags/blogging"},{"inline":true,"label":"kubernetes","permalink":"/tags/kubernetes"}],"readingTime":0.755,"hasTruncateMarker":true,"authors":[{"name":"Nullniverse","title":"Vassal @ \u7279\u8d38 Cyber","url":"https://github.com/nullniverse","imageURL":"https://github.com/nullniverse.png","key":"nullniverse","page":null}],"frontMatter":{"slug":"pod-recurrent-restarts","title":"Pod Recurrent Restarts via Cronjobs","authors":["nullniverse"],"tags":["blogging","kubernetes"]},"unlisted":false,"prevItem":{"title":"Netwitness Integrations 101","permalink":"/netwitness-parser-101"},"nextItem":{"title":"Helm Chart Templating Tricks","permalink":"/helm-chart-tricks"}},"content":"_Ever wondered how to cycle your deployment/pods the native way? Think no more!_\\n\\n {/* truncate */}\\n\\n---\\n\\n```jsx title=\\"Roles and account creation\\" showLineNumbers\\nkubectl apply -f - <<EOF\\napiVersion: v1\\nkind: ServiceAccount\\nmetadata:\\n  name: deployment-restart\\n  namespace: ns-name\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: Role\\nmetadata:\\n  name: deployment-restart\\n  namespace: ns-name\\nrules:\\n  - apiGroups: [\\"apps\\", \\"extensions\\"]\\n    resources: [\\"deployments\\"]\\n    resourceNames: [\\"deployment-name\\"]\\n    verbs: [\\"get\\", \\"patch\\", \\"list\\", \\"watch\\"]\\n---\\napiVersion: rbac.authorization.k8s.io/v1\\nkind: RoleBinding\\nmetadata:\\n  name: deployment-restart\\n  namespace: ns-name\\nroleRef:\\n  apiGroup: rbac.authorization.k8s.io\\n  kind: Role\\n  name: deployment-restart\\nsubjects:\\n  - kind: ServiceAccount\\n    name: deployment-restart\\n    namespace: ns-name\\nEOF\\n```\\n\\n```jsx title=\\"Cronjob creation\\" showLineNumbers\\nkubectl apply -f - <<EOF\\napiVersion: batch/v1\\nkind: CronJob\\nmetadata:\\n  name: deployment-restart\\n  namespace: ns-name\\nspec:\\n  schedule: \\"* */5 * * *\\"\\n  jobTemplate:\\n    spec:\\n      backoffLimit: 2\\n      activeDeadlineSeconds: 600\\n      template:\\n        spec:\\n          serviceAccountName: deployment-restart\\n          containers:\\n            - command:\\n                - bash\\n                - -c\\n                - >-\\n                  kubectl rollout restart deployment/deployment-name && kubectl rollout status deployment/deployment-name\\n              image: bitnami/kubectl\\n              imagePullPolicy: IfNotPresent\\n              name: kubectl\\n          restartPolicy: Never\\nEOF\\n```"},{"id":"helm-chart-tricks","metadata":{"permalink":"/helm-chart-tricks","source":"@site/blog/2024-04-11-helm-chart-tricks/index.mdx","title":"Helm Chart Templating Tricks","description":"Some trick to alleviate the daily Helm burden of managing multiple equal resources in your deployments.","date":"2024-04-11T00:00:00.000Z","tags":[{"inline":true,"label":"blogging","permalink":"/tags/blogging"},{"inline":true,"label":"helm","permalink":"/tags/helm"}],"readingTime":1.73,"hasTruncateMarker":true,"authors":[{"name":"Nullniverse","title":"Vassal @ \u7279\u8d38 Cyber","url":"https://github.com/nullniverse","imageURL":"https://github.com/nullniverse.png","key":"nullniverse","page":null}],"frontMatter":{"slug":"helm-chart-tricks","title":"Helm Chart Templating Tricks","authors":["nullniverse"],"tags":["blogging","helm"]},"unlisted":false,"prevItem":{"title":"Pod Recurrent Restarts via Cronjobs","permalink":"/pod-recurrent-restarts"},"nextItem":{"title":"Github Multi Accounting","permalink":"/github-multiaccount"}},"content":"_Some trick to alleviate the daily Helm burden of managing multiple equal resources in your deployments._\\n\\n{/* truncate */}\\n\\n---\\n\\nI\'ve been writing a little bit of Helm chart code for my job, because a lot of deployments are outdated and we are migrating our CI/CD pipelines from Drone.io to ArgoCD.\\n\\nModularity and flow control is a must in order to avoid complexity.\\n\\nLet\'s go to the example. Below is a modified Ingress recipe template for k8s:\\n\\n```jsx title=\\"Ingress modified Helm templating\\" showLineNumbers\\n{{- $svcPort := .Values.service.port -}}\\n{{- if .Values.ingresses.enabled -}}\\n{{- range .Values.ingresses.ingress }}\\n// highlight-next-line\\n---\\napiVersion: networking.k8s.io/v1\\nkind: Ingress\\nmetadata:\\n  name: {{ .name }}\\n  namespace: {{ .namespace }}\\n  labels:\\n{{ include \\"app.labels\\" $ | indent 4 }}\\n  {{- with .annotations }}\\n  annotations:\\n    {{- toYaml . | nindent 4 }}\\n  {{- end }}\\nspec:\\n{{- if .tls }}\\n  tls:\\n  {{- range .tls }}\\n    - hosts:\\n    {{- range .hosts }}\\n      - {{ . | quote }}\\n    {{- end }}\\n      secretName: {{ .secretName }}\\n  {{- end }}\\n{{- end }}\\n  rules:\\n{{- range .rules }}\\n    - host: {{ .hosts | quote }}\\n      http:\\n      {{- range .http.paths }}\\n        paths:\\n          - path: {{ .path | quote }}\\n            pathType: {{ .pathType | quote }}\\n            backend:\\n              service:\\n                name: {{ .backend.service.name | quote }}\\n                port:\\n                  number: {{ .backend.service.port.number | default $svcPort }}   \\n      {{- end }}  \\n{{- end }}\\n{{- end }}\\n{{- end }}\\n```\\n:::info\\nNote the highlighted line above (4), that allows it to iterate during resource creation generating multiple objects.\\n:::\\n\\nIt\'s not only following the API structure for the networking.k8s.io/v1 ingress kind, but it\'s also modular enough so you can attach and remove ingresses as needed without much hurdle.\\n\\nHere follows the `value.yaml` example. \\n\\nIt can have a vast number of ingresses each one starting at \\"name\\":\\n\\n```jsx title=\\"Multiple ingress objects declared in values.yaml\\" showLineNumbers\\ningresses:\\nenabled: true\\ningress:\\n    - name: ingress-1\\n    namespace: namespace\\n    annotations:\\n    ...\\n    tls:\\n        - hosts: my.host.com\\n        secretName: tls-my-host.com\\n    rules:\\n        - hosts: my.host.com\\n        http:\\n            paths:\\n            - path: /\\n            pathType: Prefix\\n            backend:\\n                service:\\n                name: \\"service-name\\"\\n                port:\\n                    number: 80\\n    - name: ingress-2\\n```\\n\\nThat\'s it."},{"id":"github-multiaccount","metadata":{"permalink":"/github-multiaccount","source":"@site/blog/2022-03-10-signed-commits/index.mdx","title":"Github Multi Accounting","description":"This guide is just a collection of steps and use case for implementing multi-account authentication on Github in your local machine.","date":"2022-03-10T00:00:00.000Z","tags":[{"inline":true,"label":"blogging","permalink":"/tags/blogging"},{"inline":true,"label":"git","permalink":"/tags/git"}],"readingTime":6.77,"hasTruncateMarker":true,"authors":[{"name":"Nullniverse","title":"Vassal @ \u7279\u8d38 Cyber","url":"https://github.com/nullniverse","imageURL":"https://github.com/nullniverse.png","key":"nullniverse","page":null}],"frontMatter":{"slug":"github-multiaccount","title":"Github Multi Accounting","authors":["nullniverse"],"tags":["blogging","git"]},"unlisted":false,"prevItem":{"title":"Helm Chart Templating Tricks","permalink":"/helm-chart-tricks"}},"content":"_This guide is just a collection of steps and use case for implementing multi-account authentication on Github in your local machine._\\n\\n{/* truncate */}\\n\\n---\\n\\n## Context\\n\\nThere was a time when cryptic sysadmins and developers integrated their scripts and codes underneath a pile of skull and rocks (kindly called [_Revision Control Systems_](https://en.wikipedia.org/wiki/Revision_Control_System)). \\n\\nEvolved offspring of this so-called jurassic figure filled the earth after this apocalyptical era, and rapidly became popular and known by their own names, like Subversion and TurtoiseSVN, the later its GUI implementation.\\n\\n Things were gaining traction back then, and the fast-paced rhythm on which software was being developed, spawned a new set of demon capable of spread havoc and anxiety for generations to come. Well known as [Git](https://tortoisesvn.net). \\n\\nLoved and hated, different tastes contributed more or less to what is better known today as _SCM_ - _Source Control Management_, creating a [rich and diverse ecosystem](https://en.wikipedia.org/wiki/Comparison_of_version-control_software) of tools for the occultist craft of software engineering.\\n\\nIn my life I\'ve only used two systems for SCM, SVN and Git. I also have seen people scratching their heads to be more productive on their work machines and keep up with their contributions besides job-related ones. \\n\\n:::tip\\nIf you want to dig deeper into Git, there are [many resources](https://github.com/dictcp/awesome-git) and also an _de facto_ [industry standard](https://git-scm.com/book/en/v2) book written about what git is and how to better leverage its system\'s functionality. Check it out!\\n:::\\n\\nMy main drive for this post is because there\'s so much information out there about vanilla git configurations, but few ones aimed to configuration and operability for productivity - aside of installing new-shiny-tools. \\n\\nHere we go: \\n\\n* Signing commits\\n* Using multiple accounts for the same username OR getting fame & glory\\n\\n## Signing Commits\\n\\nSigning posts is the most overlooked component when you are working for a closed doors org if they enforce self-domain usage for contributors in private repos, that is: only users with email _user@myorg.com_ are able to contribute on private repositories and no outside collaborators are allowed. \\n\\nThat works... in parts! Let\'s suppose you have started small and gaining traction month by month, not only in revenue and corporate growth, but also in collaborators among your team who constantly push changes to production.\\n\\nOnce you start adding complexity in your environment, and aren\'t inclined to spend large bucks with security software for everyone\'s laptops - a couple questions arise:\\n\\n\\n1. _Are my devs skilled enough in security practices while using their machines for off-work related issues?_\\n2. _How can I be assured that the startling new shiny tools integrated in our pipelines, doesn\'t pose a security risk for the entire supply-chain of our product?_\\n3. _What if a disgruntled employee starts to pose a security risk and plans to act on behalf of other employees to compromise our chain and our users?_\\n4. _More **what ifs**..._\\n\\nWith these concerns at bay, a preliminary solution is to activate **signed commits**. \\n\\nAs [this post](https://stackoverflow.com/a/43623702) from the old is explaining, it poses a question of authenticity and integrity, because:\\n\\n>_... the software [in question] is critical to some type of security, an attacker might compromise you by substituting broken software for the software you think you\'re getting, e.g. something with a backdoor you couldn\'t easily identify. After all, you want some code, you click \\"download\\", and you trust._ - Cris from Stackoverflow Apr 26 2017\\n\\nSufficiently to say, it also puts another layer of trust in commits inside your org, validating contribution\'s origin for its members. \\n\\nSo, how do you do that? \\n\\nI\'ll summarize the main steps below, but feel free to [check this](https://docs.github.com/en/authentication/managing-commit-signature-verification/about-commit-signature-verification#gpg-commit-signature-verification) doc from Github and follow it at your own pace.\\n\\n * Install your GPG suite of tools.\\n        * Windows: [Gpg4win](https://www.gpg4win.org/)\\n        * MacOS: [GPG Suite](https://gpgtools.org/) integrates automagically in the MacOs keychain. Check be above documentation for nitty-gritty details.\\n        * Unix/Linux: Chances are you already have it, but give [gpg-agent](http://linux.die.net/man/1/gpg-agent) a try\\n * [Verify your main address](https://docs.github.com/pt/enterprise-cloud@latest/get-started/signing-up-for-github/verifying-your-email-address)\\n * Activate commit auto-sign after each commit, this will save time on each commit: `git config commit.gpgsign true`\\n\\n * Generate your key: `gpg --full-generate-key`\\n\\n:::important\\nIt *must* be at least 4096 bits (default option)\\nYour email must be the main email address of your Github account\\n:::\\n\\n * List and export your newly created GPG key: `gpg --list-secret-keys --keyid-format=long`. Copy the e.g: _3AA5C34371567BD2_ part to be used in the next command.\\n\\n```jsx title=\\"List your secret key\\"\\n$ gpg --list-secret-keys --keyid-format=long\\n/Users/hubot/.gnupg/secring.gpg\\n------------------------------------\\nsec   4096R/3AA5C34371567BD2 2016-03-10 [expires: 2017-03-10]\\nuid                          Hubot\\nssb   4096R/42B317FD4BA89E7A 2016-03-10\\n```\\n\\nNow, run the below command and copy the exhibited key in your [GPG settings on Github](https://docs.github.com/pt/github-ae@latest/authentication/managing-commit-signature-verification/adding-a-new-gpg-key-to-your-github-account):\\n\\n\\n```jsx title=\\"Copy your GPG key\\"\\n$ gpg --armor --export 3AA5C34371567BD2\\n# Prints the GPG key ID, in ASCII armor format\\n```\\n\\n * Telling Github you\'re a winner. Inserting your keys in the config\\n\\n```jsx title=\\"Configuring Git with your signing key\\"\\n$ git config user.signingkey 3AA5C34371567BD2\\n```\\n\\nThe process above can be used to generate as many keys as you want. It\'s useful if you plan to manage more than a single account on your machine/session, as we\'ll cover in the next part.\\n\\nFrom now on, you\'re able to effectively prove yourself and sign every commit you make. _Welcome to the age of surveillance capitalism!_\\n\\n## Configuring Multiple Accounts\\n\\n![Possible interactions with git and Github in a single machine/account](./account-scheme.png)\\n\\nI really appreciate your taste for the above image!\\n\\nThere\'s a way to have a virtually unlimited number of git accounts configured if you observe some tricks, but often the most sought after feature is to maximize productivity, allowing you to commit to your professional and personal projects. \\n\\n\\nThe above image says that in some cases, you want to use your personal username to work for your org, but using the _org_ domain email, while, for your private projects, preserving the personal username + email address, also. But... is that possible? *Yes*, my horseshoe crab!\\n\\n\\nLet\'s do that now:\\n\\n * Head back to your Github\'s [email](https://github.com/settings/emails) settings. In this case, let\'s create the scenario where you\'re using your personal account and planning to use this account\'s username to commit to your org.\\n * Simply add your org\'s email address and then make it valid. \\n * Your primary address can be either your org or your personal one\\n\\nAfter confirming your address, let\'s go to your `~/.gitconfig` settings in your machine.\\n\\n:::tip\\nIn this step, you\'ll not need to configure your SSH keys for each account, as the username will not change. For possible counterpositive needs, you could [check this](https://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer) ancient scroll.\\n:::\\n\\nWe are going to generate and use two additional files for this case, despite the `.gitconfig` file, and also will specify a static working path dir, to be used with one of the accounts. \\n\\n* `~/.git-personal.conf`\\n* `~/.git-professional.conf`\\n\\nIn the `.gitconfig` file you\'ll have your path choice set and additional commands:\\n\\n* `.gitconfig` \\n```jsx title=\\"Configuring the path in .gitconfig file\\" showLineNumbers\\ninclude]\\n        path = ~/.git-personal.conf\\n[includeIf \\"gitdir:~/Documents/YourOrgFolder/\\"]\\n        path = ~/.git-professional.conf\\n[init]\\n        defaultBranch = main\\n```\\n\\n* `.git-personal``\\n```jsx title=\\"Configuring your personal .gitconfig file\\" showLineNumbers\\n[user]\\n        signingkey = 3AA5C34371567BD2\\n        email = your-personal@email.com\\n        name = your-username\\n        mergeTool = vimDiff\\n[commit]\\n        gpgsign = true\\n```\\n\\n* `.git-professional`\\n```jsx title=\\"Configuring your professional .gitconfig file\\" showLineNumbers\\n[user]\\n        signingkey = FD668DAFE840A89C\\n        email = your-professional-email@organization.com\\n        name = same-username-as-your-personal-one\\n        mergeTool = vimDiff\\n[commit]\\n        gpgsign = true\\n```\\n\\nOne thing to notice in the above configuration is that you can use more than one signing key, or use the same to signed-commit in both projects - make sure your boss don\'t work two part-time jobs, if you\'ll just one key btw. \\n\\nIf you\'re taking advantage of this pandemic and working more than one all-remote job, you could negotiate to use your same username and enjoy a multi-org config. Just create more .git-professional-`<number>` files and more `[includeIf]` entries in your `.gitconfig` file.\\n\\nNow, for cloning accordingly (Github example), for other configured accounts *not* in your first `[Include]`- which is applicable to any folder _besides_ the configured others - you need to run the clone command this way:\\n\\n```jsx title=\\"Cloning from your additional accounts in the right directory\\" showLineNumbers\\n$ git clone git@github.com-<account_username>:<account_username>/<repo_name>.git <repo_name>_<account_username>\\n\\n$ git clone git@github.com-nullniverse:nullniverse/my_repo.git my_repo_nullniverse\\n\\n```\\n\\nThat\'s it."}]}}')}}]);